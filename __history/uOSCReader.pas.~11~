unit uOSCReader;

interface

uses Windows, Classes, SysUtils, Forms, MMSystem, vdsolib ;

type
  TOSCReader = class
  private
    FOnReadData: TReadData;
    fSampleRate: DWORD;
    fDataArray: array of Double;
    fCaptureIsReady: Boolean;


    procedure SetOnReadData(Value: TReadData);
    procedure SetSampleRate(Value: DWORD);
  protected

  public
var       IsStopped: Boolean;
    procedure StartCapture; virtual;
    procedure StopCapture; virtual;
    property SampleRate: DWORD read fSampleRate write SetSampleRate;
    property OnReadData: TReadData read FOnReadData write SetOnReadData;
    constructor Create; // (aSampleRate : DWORD);

  end;



procedure DevNoticeCallBack(aData: Pointer); stdcall;
procedure DataReadyCallBack(aData: Pointer); stdcall;
procedure DevRemoveCallBack(aData: Pointer); stdcall;


  var
  fRealLength, fCaptureLength: DWORD;

  DataIsReady: Boolean;
  DeviceIsReady: Boolean;
  OSCDoubleBuff: PDoubleArray;
  ReadBytesFromOSC: DWORD;
  ChannelNum: Integer;

//  function SetOscSample(Sample: DWORD): Integer; stdcall;
//  external 'VDSO.dll' delayed  name '_SetOscSample@4';

implementation


//function InitDll: Integer; stdcall; external 'VDSO.dll' delayed   name '_InitDll@0';
//function FinishDll: Integer; stdcall; external 'VDSO.dll' delayed  name '_FinishDll@0';
//function GetOscSupportSampleNum: Integer; stdcall;
//  external 'VDSO.dll' delayed  name '_GetOscSupportSampleNum@0';
//function IsDevAvailable: Integer; stdcall;
//  external 'VDSO.dll' delayed  name '_IsDevAvailable@0';
//procedure SetDevNoticeCallBack(aData: Pointer; AddCallBack: PNoticeCallBack;
//  RemoveCallBack: PNoticeCallBack); stdcall;
//  external 'VDSO.dll' delayed  name '_SetDevNoticeCallBack@12';
//procedure SetDataReadyCallBack(aData: Pointer;
//  DataReadyCallBack: PNoticeCallBack); stdcall;
//  external 'VDSO.dll' delayed  name '_SetDataReadyCallBack@8';
//function Capture(Capture_length: Integer): Integer; stdcall;
//  external 'VDSO.dll' delayed  name '_Capture@4';
//function IsDataReady: Integer; stdcall;
//  external 'VDSO.dll' delayed  name '_IsDataReady@0';
//function GetOscSupportSamples(Samples: Pointer; NumSamples: Integer): Integer;
//  stdcall; external 'VDSO.dll' delayed  name '_GetOscSupportSamples@8';
//function ReadVoltageDatas(Channel: Integer; DoubleArray: Pointer;
//  DataLen: DWORD): DWORD; stdcall;
//  external 'VDSO.dll' delayed  name '_ReadVoltageDatas@12';
//function SetOscChannelRange(Channel, Minmv, Maxmv: Integer): Integer; stdcall;
//  external 'VDSO.dll' delayed  name '_SetOscChannelRange@12';
//function GetMemoryLength: DWORD; stdcall;
//  external 'VDSO.dll' delayed  name '_GetMemoryLength@0';

{ TOSC }


uses uOSCmain;

constructor TOSCReader.Create; // (aSampleRate : DWORD);
begin
  // SampleRate:=aSampleRate;

  DataIsReady := False;
  DeviceIsReady := False;
  IsStopped := False;
end;


procedure TOSCReader.SetOnReadData(Value: TReadData);
begin
  FOnReadData := Value;
end;

procedure TOSCReader.SetSampleRate(Value: DWORD);
begin
  fSampleRate := Value;
end;

procedure TOSCReader.StartCapture;
begin
  IsStopped := False;
end;

procedure TOSCReader.StopCapture;
begin
  IsStopped := True;
end;

{ TOSCReaderDevice }

procedure DevRemoveCallBack(aData: Pointer); stdcall;
begin
  // ShowMessage('RemoveCallBack');
end;

procedure DevNoticeCallBack(aData: Pointer); stdcall;
var
  sample_num, i: Integer;
  smpArr: PDwordArray;
begin
  sample_num := GetOscSupportSampleNum();
  SetOscChannelRange(0, -6000, 6000);
  fCaptureLength := GetMemoryLength();

  GetMem(smpArr, sample_num * SizeOf(DWORD));
  GetOscSupportSamples(smpArr, sample_num);


  for i := 0 to sample_num - 1 do
  begin
    FormuOSCR.lst1.AddItem(Format('%d', [smpArr[i]]), nil);
  end;
//  SetOscSample(smpArr[i - 1]);
//   SetOscSample(12000000);

  DeviceIsReady := True;
 end;

procedure DataReadyCallBack(aData: Pointer); stdcall;
begin
  ReadBytesFromOSC := ReadVoltageDatas(ChannelNum, OSCDoubleBuff, fRealLength);
  DataIsReady := True;
end;







end.
